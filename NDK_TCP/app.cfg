/****************************************************************************/
/*                                                                          */
/* 广州创龙电子科技有限公司                                                 */
/*                                                                          */
/* Copyright (C) 2014-2016 Guangzhou Tronlong Electronic Technology Co.,Ltd */
/*                                                                          */
/****************************************************************************/
/*
 *   - Lewis
 *   - xgh@tronlong.com
 *   - DSP C6678 项目组
 *
 *   官网 www.tronlong.com
 *   论坛 51dsp.net
 *
 */

/****************************************************************************/
/*                                                                          */
/*              命名空间                                                    */
/*                                                                          */
/****************************************************************************/
/* 系统栈(ISR 及 Swi) */
Program.stack = 0x2000;

/* .args 段设置为 0
 * 例程没有用到命令行参数
 */
Program.argSize = 0x0;

/****************************************************************************/
/*                                                                          */
/*              BIOS 配置                                                   */
/*                                                                          */
/****************************************************************************/
var BIOS    =   xdc.useModule('ti.sysbios.BIOS');

/* 时能bios任务调度器 */
BIOS.taskEnabled  =   true;

/* 系统默认堆 */
/* BIOS.heapSize = 0x1000; */

/* 由源码生成客户 BIOS 库 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.assertsEnabled = true;
BIOS.logsEnabled = true;
BIOS.customCCOpts = "-mv6600 --abi=eabi -q -mi10 -mo -pdr -pden -pds=238 -pds=880 -pds1110  --program_level_compile -o3 -g --optimize_with_debug";

/****************************************************************************/
/*                                                                          */
/*              配置钩子函数和线程任务                                      */
/*                                                                          */
/****************************************************************************/
var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');
var Swi     =   xdc.useModule('ti.sysbios.knl.Swi');
var Task    =   xdc.useModule('ti.sysbios.knl.Task');
var Idle    =   xdc.useModule('ti.sysbios.knl.Idle');
var Hwi     =   xdc.useModule ('ti.sysbios.hal.Hwi');         //硬件中断模块
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Sem     =   xdc.useModule ('ti.sysbios.knl.Semaphore');
var Startup =   xdc.useModule('xdc.runtime.Startup');
var Ecm     =   xdc.useModule ('ti.sysbios.family.c64p.EventCombiner');

/* 
** 注册 EVM_init 函数到 BIOS. 此函数将会初始化硬件。在BIOS 启动前会被调用。
**
** 如果使用CCS仿真，此函数将会在加载的时候执行。 
*/
Startup.lastFxns.$add('&EVM_init');

/* 创建任务 */
var tskNdkMainThread  	    = Task.create("&NDKTask");
tskNdkMainThread.stackSize  = 0x8000;
tskNdkMainThread.priority   = 0x5;
tskNdkMainThread.instance.name	= "NDKTask";

/* 使能任务名称存储到内存 */
Task.common$.namedInstance = true;

/* 硬件中断 */
Hwi.dispatcherSwiSupport = true;
Hwi.dispatcherTaskSupport = true;

/* 使能事件组，并映射到指定的 GEM INTC */
Ecm.eventGroupHwiNum[0] = 7;
Ecm.eventGroupHwiNum[1] = 8;
Ecm.eventGroupHwiNum[2] = 9;
Ecm.eventGroupHwiNum[3] = 10;

/****************************************************************************/
/*                                                                          */
/*              内存配置                                                    */
/*                                                                          */
/****************************************************************************/
var Memory  =   xdc.useModule('xdc.runtime.Memory');
var HeapMem =   xdc.useModule('ti.sysbios.heaps.HeapMem');
var Cache   =   xdc.useModule('ti.sysbios.family.c66.Cache');

/* 创建默认堆 创建一个 名为 "systemHeap" 的 HeapMem */
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x1000000;	/* 16Mb*/
heapMemParams.sectionName = "systemHeap";

/* 创建为全局变量以便可以在 C 文件中使用 */
Program.global.SystemHeap = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance = Program.global.SystemHeap;


var rioHeapMemParams = new HeapMem.Params();
rioHeapMemParams.size = 0x1000000;	/* 16Mb*/
rioHeapMemParams.sectionName = "rioHeap";
Program.global.rioHeap = HeapMem.create(rioHeapMemParams);


/*FixUp*/ /*Cache.MAR224_255 = 0x0000000f;*/


/* rio 内存配置 */
var HeapParams = new HeapMem.Params;
HeapParams.size = 128 * 1024;
HeapParams.sectionName = ".INT_HEAP";
Program.global.INT_HEAP = HeapMem.create(HeapParams);

HeapParams.size = 512 * 1024;
HeapParams.sectionName = ".EXT_HEAP";
Program.global.EXT_HEAP = HeapMem.create(HeapParams);

var Memory = xdc.useModule('xdc.runtime.Memory')

Program.sectMap[".INT_HEAP"] = "DDR3";//"L2SRAM";
Program.sectMap[".EXT_HEAP"] = "DDR3";//"MSMCSRAM";

/****************************************************************************/

/* 存储空间分配 */
Program.sectMap["platform_lib"]          = "DDR3"; /* 平台库 */
Program.sectMap["HTML"]                  = "DDR3"; /* 静态页面 */

Program.sectMap[".resmgr_memregion"]     = {loadSegment: "L2SRAM", loadAlign:128}; /* QMSS 描述符区域 */
Program.sectMap[".resmgr_handles"]       = {loadSegment: "L2SRAM", loadAlign:16};  /* CPPI / QMSS / PA 句柄 */
Program.sectMap[".resmgr_pa"]	         = {loadSegment: "L2SRAM", loadAlign:8};   /* PA 内存 */	
Program.sectMap[".vecs"]                 = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".switch"]               = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".cio"]                  = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".args"]                 = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".cppi"] 		         = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".far:NDK_OBJMEM"]       = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".nimu_eth_ll2"]         = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".qmss"]                 = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".stack"]                = "L2SRAM";
Program.sectMap[".gBuffer"]		         = {loadSegment: "DDR3", loadAlign:32};
Program.sectMap[".far:taskStackSection"] = "MSMCSRAM";                                /* BIOS 任务栈 */
Program.sectMap[".far:NDK_PACKETMEM"]    = {loadSegment: "MSMCSRAM", loadAlign: 128}; /* NDK 内存池 */

Program.sectMap[".bss"]			= "DDR3";									/* .bbs .neardata and .rodata are GROUPED */
Program.sectMap[".neardata"]	= "DDR3";
Program.sectMap[".rodata"]		= "DDR3";
Program.sectMap["systemHeap"] 	= {loadSegment: "DDR3", loadAlign:0x1000000};	  	/* XDC Heap .. eg Memory_alloc () 	*/
Program.sectMap["rioHeap"] 	= {loadSegment: "DDR3", loadAlign:0x1000000};	  	/* rio Memory_alloc () 	*/
Program.sectMap[".far"] 		= "DDR3";
Program.sectMap[".cinit"] 		= "DDR3";
Program.sectMap[".const"]		= "DDR3";
Program.sectMap[".text"]		= "DDR3";
Program.sectMap[".code"]		= "DDR3";
Program.sectMap[".data"]		= "DDR3";
Program.sectMap[".sysmem"] 		= "DDR3";								   /* Malloc memory area 					*/	

/****************************************************************************/
/*                                                                          */
/*              日志模块                                                    */
/*                                                                          */
/****************************************************************************/
var System  =   xdc.useModule('xdc.runtime.System');
var SysStd  =   xdc.useModule('xdc.runtime.SysStd');
var Exc     =   xdc.useModule('ti.sysbios.family.c64p.Exception');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');     // 日志模块，设置异常日志后可以在CCS的ROV观察

/* System_printf 输出到 console 所必须的 */
System.SupportProxy     =   SysStd;
 
/* 设置异常日志 */
Exc.common$.logger = LoggerBuf.create();
Exc.enablePrint = true; /* 打印异常信息到 CCS console */

/****************************************************************************/
/*                                                                          */
/*              系统分析                                                    */
/*                                                                          */
/****************************************************************************/
var Load         =   xdc.useModule('ti.sysbios.utils.Load');
var Logging      = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var Diags        =   xdc.useModule('xdc.runtime.Diags');           // 诊断模块

/* 给负载模块添加一个独立的 LoggerBuf，确保事件不会被覆盖 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.exitFlush = true;
loggerBufParams.numEntries = 64;
Load.common$.logger = LoggerBuf.create(loggerBufParams);
/* UIA */
Logging.sysbiosHwiLogging = true;
Logging.sysbiosSwiLogging = true;
Logging.sysbiosHwiLoggingRuntimeControl = true;
Logging.sysbiosSwiLoggingRuntimeControl = true;
Logging.eventUploadMode = Logging.UploadMode_JTAGRUNMODE;

Load.hwiEnabled = true;
Load.swiEnabled = true;
/*启动 CPU 负载模块*/
Load.common$.diags_USER4 = Diags.ALWAYS_ON;

/****************************************************************************/
/*                                                                          */
/*              NDK 配置                                                    */
/*                                                                          */
/****************************************************************************/
var Global  =   xdc.useModule('ti.ndk.config.Global');        // NDK

/* 允许创建心跳函数，但不创建任何服务，服务会在主任务里创建 */
Global.enableCodeGeneration = false;


